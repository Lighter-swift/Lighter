//
//  Created by Helge Heß.
//  Copyright © 2022 ZeeZide GmbH.
//

import SQLite3Schema

public extension EntityInfo {
  
  /**
   * A property represents a column in a SQL table or view.
   */
  struct Property: Equatable {
    
    /**
     * The Swift type of the property.
     */
    public enum PropertyType: Equatable { // `SQLiteValueType`
      case integer
      case double
      case string
      case uint8Array

      case bool
      
      // Builtin Foundation Support
      
      case date       // aka SQL TIMESTAMP, needs a datestyle
      case data       // alternative to uint8Array
      case url
      case decimal
      case uuid
      
      /// W/ Lighter one can assign own types. They can be mapped to SQL types
      /// or columns in the ``Fancifier``.
      /// Those types need to conform to the Lighter `SQLiteValueType` and
      /// usually to `Hashable`.
      case custom(String)
      
      public static func ==(lhs: Self, rhs: Self) -> Bool {
        switch ( lhs, rhs ) {
          case ( .integer,    .integer    ) : return true
          case ( .double,     .double     ) : return true
          case ( .string,     .string     ) : return true
          case ( .uint8Array, .uint8Array ) : return true
          case ( .bool,       .bool       ) : return true
          case ( .date,       .date       ) : return true
          case ( .data,       .data       ) : return true
          case ( .url,        .url        ) : return true
          case ( .decimal,    .decimal    ) : return true
          case ( .uuid,       .uuid       ) : return true
          case ( .custom(let lhs), .custom(let rhs) ): return lhs == rhs
          default: return false
        }
      }
    }
    
    /// The Swift name of the property, e.g. `personId`
    public var name                    : String
    /// The SQL name of the property, e.g. `person_id`
    public let externalName            : String
    
    /// The Swift type of the property, w/o optionality, e.g. `.string`
    public var propertyType            : PropertyType
    /// The SQL type of the property
    public let columnType              : Schema.ColumnType?
    
    /// The default value specified in the database. If applicable, that is used
    /// when column values are otherwise missing.
    public let defaultValue            : Schema.Column.DefaultValue?
    
    /// Whether the property is a primary key.
    public var isPrimaryKey            : Bool
    /// Whether the property wasn't marked as a primary key but got synthesized
    /// by the mapper.
    public var isPrimaryKeySynthesized : Bool = false
    /// Whether the property is marked as `NOT NULL` i.e. non-optional.
    public let isNotNull               : Bool
    
    /// If the property is a SQL foreign key, this has the associated
    /// information.
    public var foreignKey              : Schema.ForeignKey?
    /// Whether the property wasn't marked as a foreign key but got synthesized
    /// by the mapper.
    public var isForeignKeySynthesized : Bool = false

    /// Whether this property has a type that can be generated by the SQLite
    /// database.
    /// https://www.sqlite.org/lang_createtable.html#rowid
    /// https://www.sqlite.org/autoinc.html
    /// Note: This is only really true for `INTEGER`, just `INT` doesn't trigger
    ///       the ID generation!!
    public var canBeDatabaseGenerated : Bool {
      // If the key is synthesized, i.e. not marked as a pkey in the DB, the DB
      // won't generate a value for it!
      columnType == .integer && isPrimaryKey && !isPrimaryKeySynthesized
    }
  }
}

extension EntityInfo.Property.PropertyType: CustomStringConvertible {
  
  /// Returns the Swift name of the property type, e.g. `Int` or `UUID`.
  var rawValue : String {
    switch self {
      case .integer    : return "Int"
      case .double     : return "Double"
      case .string     : return "String"
      case .uint8Array : return "[ UInt8 ]"

      case .bool       : return "Bool"
      
      // Foundation Extra Support
      case .date       : return "Date"
      case .data       : return "Data"
      case .url        : return "URL"
      case .decimal    : return "Decimal"
      case .uuid       : return "UUID"
      
      case .custom(let swiftType) : return swiftType
    }
  }
  
  /// Returns a debug description for the property type.
  public var description: String { rawValue }
}

extension EntityInfo.Property: CustomStringConvertible {
  
  /// Returns a debug description for the property.
  public var description: String {
    var ms = "<Property[\(name)]:"
    if externalName != name { ms += " ext=\"\(externalName)\"" }

    ms += " \(propertyType.rawValue)"
    if !isNotNull { ms += "?" }
    
    if let type = columnType { ms += " \(type)" }
    else                     { ms += " no-type" }
    
    if isNotNull    { ms += " NOT NULL" }
    if isPrimaryKey { ms += " pkey"     }
    
    if let fkey = foreignKey { ms += " foreignKey=\(fkey)" }
    
    if let value = defaultValue { ms += " \(value)" }
    ms += ">"
    return ms
  }
}
